openapi: 3.0.3
info:
  title: Meeting Planner API
  version: 1.0.0
  description: REST API for scheduling one-on-one and group meetings

servers:
  - url: https://api.example.com

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        full_name:
          type: string
        timezone:
          type: string
    EventTemplate:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        duration_minutes:
          type: integer
        buffer_before_minutes:
          type: integer
        buffer_after_minutes:
          type: integer
        group_event:
          type: boolean
        max_participants:
          type: integer
        active:
          type: boolean
        slug:
          type: string
        timezone:
          type: string
    AvailabilityRule:
      type: object
      properties:
        id:
          type: string
        weekday:
          type: integer
        start_time:
          type: string
          format: time
        end_time:
          type: string
          format: time
    TimeSlot:
      type: object
      properties:
        id:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        available:
          type: boolean
    Booking:
      type: object
      properties:
        id:
          type: string
        invitee_name:
          type: string
        invitee_email:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        canceled:
          type: boolean

security:
  - BearerAuth: []

paths:
  /auth/register:
    post:
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User created
  /auth/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful, returns JWT

  /me:
    get:
      summary: Get current user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current user

  /event-templates:
    get:
      summary: List event templates
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
    post:
      summary: Create event template
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventTemplate'
      responses:
        '201':
          description: Created

  /event-templates/{id}:
    get:
      summary: Get event template
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
    put:
      summary: Update event template
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventTemplate'
      responses:
        '200':
          description: Updated
    delete:
      summary: Delete event template
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted

  /availability-rules:
    get:
      summary: List availability rules
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
    post:
      summary: Create availability rule
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AvailabilityRule'
      responses:
        '201':
          description: Created

  /time-slots:
    get:
      summary: Get available time slots for a template
      parameters:
        - in: query
          name: event_template_id
          schema:
            type: string
      responses:
        '200':
          description: List of time slots

  /bookings:
    get:
      summary: List my bookings
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of bookings
    post:
      summary: Public booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '201':
          description: Created

  /bookings/{id}/cancel:
    post:
      summary: Cancel booking
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Booking canceled
