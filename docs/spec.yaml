openapi: 3.0.3
info:
  title: Meeting Planner API
  version: 1.0.0
  description: REST API for scheduling one-on-one and group meetings

servers:
  - url: https://api.example.com

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:

    ApiError:
      type: object
      properties:
        timestamp:
          type: string
          format: timestamp
          example: 2001-02-03T04:05:06Z
        status:
          type: integer
          example: 404
        error:
          type: string
          example: Not Found
        message:
          type: string
          example: Event [8840ddd5-e176-46d8-8f1b-babb00d989cd] not found
        path:
          type: string
          example: /api/events/8840ddd5-e176-46d8-8f1b-babb00d989cd

    RegisterRequest:
      type: object
      required:
        - username
        - password
        - email
      properties:
        username:
          type: string
          nullable: false
          maxLength: 255
          example: alice
        password:
          type: string
          nullable: false
          example: 12345
        email:
          type: string
          format: email
          nullable: false
          maxLength: 255
          example: alice@mail.com

    UserDto:
      type: object
      required:
        - id
        - username
        - email
      properties:
        id:
          type: string
          format: uuid
          example: d3e68c3b-2d6d-48a1-a037-99a390e9433e
        username:
          type: string
          example: alice
        email:
          type: string
          format: email
          example: alice@mail.com

    Profile:
      type: object
      required:
        - userId
        - fullName
        - timezone
        - isActive
        - createdAt
        - updatedAt
      properties:
        userId:
          type: string
          format: UUID
        fullName:
          type: string
        timezone:
          type: string
        description:
          type: string
        isActive:
          type: boolean
          default: true
        logo:
          type: string
        createdAt:
          type: string
          format: timestamp
        updatedAt:
          type: string
          format: timestamp
    CreateProfileRequest:
      type: object
      required:
        - fullName
        - timezone
      properties:
        fullName:
          type: string
        timezone:
          type: string
        description:
          type: string
        logo:
          type: string
      example:
        fullName: Alice Arno
        timezone: Europe/Paris
        description: Test description
        logo: Logo
    ProfileResponse:
      type: object
      required:
        - userId
        - fullName
        - timezone
        - isActive
      properties:
        userId:
          type: string
          format: UUID
        fullName:
          type: string
        timezone:
          type: string
        description:
          type: string
        isActive:
          type: boolean
        logo:
          type: string
      example:
        userId: d3e68c3b-2d6d-48a1-a037-99a390e9433e
        username: alice
        fullName: Alice Arno
        timezone: Europe/Paris
        description: Test description
        isActive: true
        logo: Logo

    EventFullDto:
      type: object
      properties:
        id:
          type: string
          format: UUID
        ownerId:
          type: string
          format: UUID
        title:
          type: string
        description:
          type: string
        durationMinutes:
          type: integer
        bufferBeforeMinutes:
          type: integer
        bufferAfterMinutes:
          type: integer
        maxParticipants:
          type: integer
        isActive:
          type: boolean
        eventType:
          type: string
          enum:
            - ONE2ONE
            - GROUP
        slug:
          type: string
        startDate:
          type: string
          format: timestamp
        endDate:
          type: string
          format: timestamp
        createdAt:
          type: string
          format: timestamp
        updatedAt:
          type: string
          format: timestamp
      example:
        id: 8840ddd5-e176-46d8-8f1b-babb00d989cd
        ownerId: d3e68c3b-2d6d-48a1-a037-99a390e9433e
        title: Demo
        description: 'Sprint #42 demo'
        durationMinutes: 60
        bufferBeforeMinutes: 10
        bufferAfterMinutes: 15
        maxParticipants: 1
        isActive: true
        eventType: ONE2ONE
        slug: b452644a-dba8-427a-8e44-d5c1bc528231
        startDate: 2024-07-01T10:00:00Z
        endDate: 2024-07-04T17:00:00Z
        createdAt: 2001-02-03T04:05:06.789012Z
        updatedAt: 2001-03-04T05:06:07.890123Z

    EventResponse:
      type: object
      properties:
        id:
          type: string
          format: UUID
        shareLink:
          type: string
      example:
        id: 8840ddd5-e176-46d8-8f1b-babb00d989cd
        slug: /api/public/event/b452644a-dba8-427a-8e44-d5c1bc528231

    AvailabilityRule:
      type: object
      properties:
        id:
          type: string
        weekday:
          type: integer
        start_time:
          type: string
          format: time
        end_time:
          type: string
          format: time
    TimeSlot:
      type: object
      properties:
        id:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        available:
          type: boolean
    Booking:
      type: object
      properties:
        id:
          type: string
        invitee_name:
          type: string
        invitee_email:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        canceled:
          type: boolean

security:
  - BearerAuth: []

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      requestBody:
        required: true
        description: New user credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            example:
              username: alice
              password: 12345
              email: alice@mail.com
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
              example:
                id: d3e68c3b-2d6d-48a1-a037-99a390e9433e
                username: alice
                email: alice@mail.com
        '400':
          description: User credentials do not match constraints set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                timestamp: 2001-02-03T04:05:06Z
                status: 400
                error: Bad Request
                message: username must not be null
                path: /auth/register
        '409':
          description: User with same username or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                timestamp: 2001-02-03T04:05:06Z
                status: 409
                error: Conflict
                message: 'Username already exists: alice'
                path: /auth/register

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful, returns JWT

  /profiles:
    get:
      summary: Get current user profile
      security:
        - BearerAuth: []
      parameters:
        - name: x-user-id
          description: Current user id
          in: header
          schema:
            type: string
            format: UUID
            example: d3e68c3b-2d6d-48a1-a037-99a390e9433e
          required: true
      responses:
        '200':
          description: Current user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '400':
          description: No user id in request or user id of wrong format
        '401':
          description: User not authorized
        '403':
          description: User not allowed to get profile (profile belongs to another user)
        '404':
          description: Profile for current user not found
    post:
      summary: Create profile for current user
      security:
        - BearerAuth: []
      parameters:
        - name: x-user-id
          description: Current user id
          in: header
          schema:
            type: string
            format: UUID
            example: d3e68c3b-2d6d-48a1-a037-99a390e9433e
          required: true
      requestBody:
        description: User profile parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProfileRequest'
        required: true
      responses:
        '201':
          description: Created profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '400':
          description: No user id in request or user id of wrong format or errors in user profile parameters
        '401':
          description: User not authorized
        '403':
          description: User not allowed to create profile (profile belongs to another user)
        '409':
          description: Profile for current user already exist

  /me:
    get:
      summary: Get current user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current user

  /api/events:
    get:
      tags:
        - Events
      summary: List event templates
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
    post:
      tags:
        - Events
      summary: Create event template
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventResponse'
      responses:
        '201':
          description: Created

  /api/events/{id}:
    get:
      tags:
        - Events
      summary: Get event
      security:
        - BearerAuth: []
      parameters:
        - name: x-user-id
          description: Current user id
          in: header
          schema:
            type: string
            format: UUID
            example: d3e68c3b-2d6d-48a1-a037-99a390e9433e
          required: true
        - name: id
          description: Event id
          in: path
          schema:
            type: string
            format: UUID
            example: 8840ddd5-e176-46d8-8f1b-babb00d989cd
          required: true
      responses:
        '200':
          description: Event requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventFullDto'
        '400':
          description: No user id in request or user id of wrong format or event id of wrong format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                timestamp: 2024-07-01T02:03:04Z
                status: 400
                error: Bad Request
                message: Required request header 'X-USER-ID' for method parameter type UUID is not present
                path: /api/events/8840ddd5-e176-46d8-8f1b-babb00d989cd
        '401':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                timestamp: 2024-07-01T02:03:04Z
                status: 401
                error: Unauthorized
                message: User [d3e68c3b-2d6d-48a1-a037-99a390e9433e] is not authorized
                path: /api/events/8840ddd5-e176-46d8-8f1b-babb00d989cd
        '403':
          description: User not allowed to get event (event belongs to another user)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                timestamp: 2024-07-01T02:03:04Z
                status: 403
                error: Forbidden
                message: User can get own events only
                path: /api/events/8840ddd5-e176-46d8-8f1b-babb00d989cd
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                timestamp: 2024-07-01T02:03:04Z
                status: 404
                error: Not Found
                message: Event [8840ddd5-e176-46d8-8f1b-babb00d989cd] not found
                path: /api/events/8840ddd5-e176-46d8-8f1b-babb00d989cd
    put:
      tags:
        - Events
      summary: Update event template
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventFullDto'
      responses:
        '200':
          description: Updated
    delete:
      tags:
        - Events
      summary: Delete event template
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted

  /availability-rules:
    get:
      summary: List availability rules
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
    post:
      summary: Create availability rule
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AvailabilityRule'
      responses:
        '201':
          description: Created

  /time-slots:
    get:
      summary: Get available time slots for a template
      parameters:
        - in: query
          name: event_template_id
          schema:
            type: string
      responses:
        '200':
          description: List of time slots

  /bookings:
    get:
      summary: List my bookings
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of bookings
    post:
      summary: Public booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '201':
          description: Created

  /bookings/{id}/cancel:
    post:
      summary: Cancel booking
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Booking canceled
