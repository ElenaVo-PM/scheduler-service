openapi: 3.0.3
info:
  title: Meeting Planner API
  version: 1.0.0
  description: REST API for scheduling one-on-one and group meetings

servers:
  - url: https://api.example.com

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
    Profile:
      type: object
      required:
        - userId
        - fullName
        - timezone
        - isActive
        - createdAt
        - updatedAt
      properties:
        userId:
          type: string
          format: UUID
        fullName:
          type: string
        timezone:
          type: string
        description:
          type: string
        isActive:
          type: boolean
          default: true
        logo:
          type: string
        createdAt:
          type: string
          format: timestamp
        updatedAt:
          type: string
          format: timestamp
    CreateProfileRequest:
      type: object
      required:
        - fullName
        - timezone
      properties:
        fullName:
          type: string
        timezone:
          type: string
        description:
          type: string
        logo:
          type: string
      example:
        fullName: Alice Arno
        timezone: Europe/Paris
        description: Test description
        logo: Logo
    ProfileResponse:
      type: object
      required:
        - userId
        - fullName
        - timezone
        - isActive
      properties:
        userId:
          type: string
          format: UUID
        fullName:
          type: string
        timezone:
          type: string
        description:
          type: string
        isActive:
          type: boolean
        logo:
          type: string
      example:
        userId: d3e68c3b-2d6d-48a1-a037-99a390e9433e
        username: alice
        fullName: Alice Arno
        timezone: Europe/Paris
        description: Test description
        isActive: true
        logo: Logo
    EventTemplate:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        duration_minutes:
          type: integer
        buffer_before_minutes:
          type: integer
        buffer_after_minutes:
          type: integer
        group_event:
          type: boolean
        max_participants:
          type: integer
        active:
          type: boolean
        slug:
          type: string
        timezone:
          type: string
    AvailabilityRule:
      type: object
      properties:
        id:
          type: string
        weekday:
          type: integer
        start_time:
          type: string
          format: time
        end_time:
          type: string
          format: time
    TimeSlot:
      type: object
      properties:
        id:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        available:
          type: boolean
    Booking:
      type: object
      properties:
        id:
          type: string
        invitee_name:
          type: string
        invitee_email:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        canceled:
          type: boolean

security:
  - BearerAuth: []

paths:
  /auth/register:
    post:
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User created
  /auth/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful, returns JWT

  /profiles:
    get:
      summary: Get current user profile
      security:
        - BearerAuth: []
      parameters:
        - name: x-user-id
          description: Current user id
          in: header
          schema:
            type: string
            format: UUID
            example: d3e68c3b-2d6d-48a1-a037-99a390e9433e
          required: true
      responses:
        '200':
          description: Current user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '400':
          description: No user id in request or user id of wrong format
        '401':
          description: User not authorized
        '403':
          description: User not allowed to get profile (profile belongs to another user)
        '404':
          description: Profile for current user not found
    post:
      summary: Create profile for current user
      security:
        - BearerAuth: []
      parameters:
        - name: x-user-id
          description: Current user id
          in: header
          schema:
            type: string
            format: UUID
            example: d3e68c3b-2d6d-48a1-a037-99a390e9433e
          required: true
      requestBody:
        description: User profile parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProfileRequest'
        required: true
      responses:
        '201':
          description: Created profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '400':
          description: No user id in request or user id of wrong format or errors in user profile parameters
        '401':
          description: User not authorized
        '403':
          description: User not allowed to create profile (profile belongs to another user)
        '409':
          description: Profile for current user already exist

  /me:
    get:
      summary: Get current user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current user

  /event-templates:
    get:
      summary: List event templates
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
    post:
      summary: Create event template
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventTemplate'
      responses:
        '201':
          description: Created

  /event-templates/{id}:
    get:
      summary: Get event template
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
    put:
      summary: Update event template
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventTemplate'
      responses:
        '200':
          description: Updated
    delete:
      summary: Delete event template
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted

  /availability-rules:
    get:
      summary: List availability rules
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
    post:
      summary: Create availability rule
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AvailabilityRule'
      responses:
        '201':
          description: Created

  /time-slots:
    get:
      summary: Get available time slots for a template
      parameters:
        - in: query
          name: event_template_id
          schema:
            type: string
      responses:
        '200':
          description: List of time slots

  /bookings:
    get:
      summary: List my bookings
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of bookings
    post:
      summary: Public booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '201':
          description: Created

  /bookings/{id}/cancel:
    post:
      summary: Cancel booking
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Booking canceled
